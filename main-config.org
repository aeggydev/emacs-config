* Behavior
** Loading
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
** Dialogs
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
* Package management
** Straight
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel)
  (use-package ivy
    :after counsel
    :config
    (ivy-mode 1)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    )
#+END_SRC
* Vim
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1)
    )
#+END_SRC
* Aesthetics
** Font
#+begin_src emacs-lisp
  (set-default-font "xos4 Terminus 14")
#+end_src
** Colorscheme
#+begin_src emacs-lisp
  (load-theme 'wombat t)
#+end_src
** Editor frame
Make Emacs more minimalist
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (blink-cursor-mode 0)
#+END_SRC

Add some widgets
#+BEGIN_SRC emacs-lisp
  ;;(global-hl-line-mode 1)
  (column-number-mode 1)
  (size-indication-mode 1)
#+END_SRC
** Fringe
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    )
#+END_SRC
* Org
** Formatting
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  ;;(setq org-src-tab-acts-natively t)
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t)
#+END_SRC
* Programming languages
** Universal
*** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2
                indent-tabs-mode nil)
#+END_SRC
*** Parenthesis
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
#+END_SRC
*** Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'prog-mode-hook (lambda () (company-mode 1)))
    )
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config
    (add-hook 'before-save-hook 'gofmt-before-save)
    )
  (use-package company-go
    :after company
    )
#+END_SRC
** Web
*** TypeScript
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :init
    (setq typescript-indent-level 2)
    :config
    (add-hook 'typescript-mode-hook (lambda () (tide-mode 1)))
    )
#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    )
#+END_SRC
