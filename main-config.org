#+TITLE: aeggy's emacs config
#+AUTHOR: aeggy
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Behavior
** Startup
Resume the previous session
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC
** Loading
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0)
  (setq scroll-conservatively 100000)
  (setq scroll-preserve-screen-position 1)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
** Dialogs
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
** Recent
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
#+END_SRC
* Package management
** Straight
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
    (url-retrieve-synchronously
     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
     'silent 'inhibit-cookies)
  (goto-char (point-max))
  (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC
* Buffer / window navigation
** Ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Windmove
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC
** Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :config
    (eyebrowse-mode 1)
    )
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    )
#+END_SRC
* Project navigation
** TODO counsel-rg
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (setq projectile-completion-system 'ivy)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode 1)
    )

  (use-package counsel-projectile
    :after counsel projectile
    )
#+END_SRC
* Ivy
*** Ivy itself
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (global-set-key (kbd "C-c r") 'ivy-resume)
    )
#+END_SRC
*** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :config
    (counsel-mode 1)

    (global-set-key (kbd "M-x") #'counsel-M-x)
    (global-set-key (kbd "C-x b") #'counsel-switch-buffer)
    (global-set-key (kbd "C-c h") #'counsel-command-history)
    (global-set-key (kbd "C-c m") #'counsel-imenu)
    (global-set-key (kbd "C-c x") #'counsel-linux-app)
    (global-set-key (kbd "C-c g") #'counsel-recentf)
    (global-set-key (kbd "<f10>") #'counsel-tmm)
    (add-hook 'eshell-mode-hook (lambda () (local-set-key (kbd "C-c h") #'counsel-esh-history)))
    )
#+END_SRC
*** TODO Swiper
* Aesthetics
** Font
#+begin_src emacs-lisp
  (set-default-font "xos4 Terminus 14")
#+end_src
** Colorscheme
#+begin_src emacs-lisp
  (load-theme 'wombat t)
#+end_src
** Editor frame
Make Emacs more minimalist
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (blink-cursor-mode 0)
#+END_SRC

Add some widgets
#+BEGIN_SRC emacs-lisp
  ;;(global-hl-line-mode 1)
  (column-number-mode 1)
  (size-indication-mode 1)
#+END_SRC
** Fringe
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    )
#+END_SRC
* Org
** Formatting
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC
*** Exporting
**** HTML
Allow exporting to HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    )
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t)
#+END_SRC
* Programming languages
** Universal
*** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2
    indent-tabs-mode nil)
#+END_SRC
*** Parenthesis
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
  (show-paren-mode 1)
#+END_SRC
*** Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'prog-mode-hook (lambda () (company-mode 1)))
    )
#+END_SRC
**** TODO Use counsel-company
*** Error checking
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    :config
    (global-flycheck-mode 1)
    (add-hook 'emacs-lisp-mode-hook (lambda () (add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc)))
    )
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config
    (add-hook 'before-save-hook 'gofmt-before-save)
    )
  (use-package company-go
    :after company
    )
#+END_SRC
** Web
*** TypeScript
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :init
    (setq typescript-indent-level 2)
    :config
    (add-hook 'typescript-mode-hook (lambda () (tide-mode 1)))
    )
#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    )
#+END_SRC
* Text editing
** Olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    )
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :config
    (global-set-key (kbd "C-:") 'avy-goto-char)
    )
#+END_SRC
** ace-link
#+BEGIN_SRC emacs-lisp
  (use-package ace-link
    )
#+END_SRC
* Web services
** Pastebins
#+BEGIN_SRC emacs-lisp
  (use-package webpaste
    )
#+END_SRC
* Hydras
** Install
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    )
#+END_SRC
** Scripts
No hydras yet
