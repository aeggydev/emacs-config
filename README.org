#+TITLE: aeggy's emacs config
#+AUTHOR: aeggy

* Package management
** Straight
*** Load
This is a copypasted install script.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-vc-git-default-clone-depth 1)
#+end_src
** use-package
Load use-package and make it install all packages by default
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (use-package use-package
    :config
    (setq straight-use-package-by-default t)
    (defun wrap-in-use-package ()
      (interactive)
      (let ((substring (buffer-substring (region-beginning) (region-end))))
        (setf (buffer-substring (region-beginning) (region-end))
              (format "(use-package emacs\n:config\n%s)" (s-trim substring))))))

  (use-package diminish)
#+end_src
*** repo finder
#+begin_src emacs-lisp
  (defun my-straight-get-repo (package insert)
    "Echo repo to the inputted package if it exists."
    (interactive
     (list
      (intern
       (completing-read "Package: "
                        (straight-recipes-list)
                        (lambda (_) t)
                        'require-match))
      current-prefix-arg))


    (let ((recipe (cdr (straight-recipes-retrieve package)))
          (url))
      (if (eq (plist-get recipe :host) 'github)
          (progn
            (setq url (concat "https://github.com/" (plist-get recipe :repo)))
            (message url)
            (when insert (insert url)))
        (message "not hosted on github"))))
#+end_src
* no-littering
#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (setq backup-directory-alist `(("." . ,(no-littering-expand-var-file-name "backups")))))
#+end_src
* Behavior
** General.el
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-auto-unbind-keys)
    (general-create-definer leader-def
      :states 'normal
      :prefix "SPC")
    (leader-def "SPC" #'execute-extended-command))
#+end_src
** Libraries
#+begin_example
  (use-package s)
  (use-package f)
  (use-package dash)
#+end_example
** Path
Inherit PATH from the shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src
** Initial buffer
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq inhibit-startup-screen t) ; don't show the info startup screen
    (setq inhibit-startup-message t) ; ... and the message
    (setq initial-scratch-message nil) ; remove all text from the scratch buffer
    (defun display-startup-echo-area-message ()
      (message "Welcome."))
    (setq initial-major-mode 'org-mode)) ; create scratch buffer with org mode
#+end_src
** Loading
Automatically revert a buffer when it changes on disk
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-auto-revert-mode 0))
#+end_src
** TODO Scrolling
Smoother scrolling
#+begin_src emacs-lisp
  (use-package good-scroll
    :config
    (good-scroll-mode t))
  ;; TODO: Fix weird jumping
#+end_src
*** Mouse
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (add-hook 'after-init-hook
              (lambda () (set-mouse-color "white"))))
#+end_src
** Indent guides
Show lines that highlight the indentation levels
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-auto-enabled nil)
    (set-face-background 'highlight-indent-guides-odd-face "darkgray")
    (set-face-background 'highlight-indent-guides-even-face "dimgray")
    (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src
** Quitting
TODO: add support for quitting any minibuffer dialogue with ESC
** Dialogs
Make all prompts y-or-n
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (fset 'yes-or-no-p 'y-or-n-p))
#+end_src
** Saving
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq auto-save-no-message t))
#+end_src
** Saving
Clean up the whitespace when saving
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (add-hook 'before-save-hook 'whitespace-cleanup))
#+end_src
** Recent
#+begin_src emacs-lisp
  (use-package recentf
    :straight nil
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    (recentf-mode 1))
#+end_src
** Text replacing
Replace selection when you start typing
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (delete-selection-mode t))
#+end_src
** Echoing status
*** Keystrokes
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq echo-keystrokes 0.1)) ; show keystrokes right away
#+end_src
** Parenthesis highlighting
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** Prettify symbols
TODO: add more characters
TODO: add ligatures
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (setq inhibit-compacting-font-caches t)
    (add-hook 'prog-mode-hook #'prettify-symbols-mode))
#+end_src
** TODO Undo
#+begin_src emacs-lisp
  (use-package undo-tree
    :after evil
    :diminish undo-tree-mode
    :config
    ;;(setq undo-tree-auto-save-history t)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (global-undo-tree-mode)
    (setq evil-undo-system 'undo-tree))
#+end_src
*** TODO Remove undo-tree eventually
** Tooltips
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq x-gtk-use-system-tooltips nil))
#+end_src
** GUI
#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;; make emacs frames maximize fully
    (setq frame-resize-pixelwise t))
#+end_src
** Jump highlighting
Alternative to beacon
#+begin_src emacs-lisp
  (use-package pulse
    :straight nil
    :config
    (defun pulse-line (&rest _)
      "Pulse the current line."
      (pulse-momentary-highlight-one-line (point)))

    (set-face-background 'pulse-highlight-start-face "yellow")

    (dolist (command '(scroll-up-command scroll-down-command
                                         recenter-top-bottom other-window))
      (advice-add command :after #'pulse-line)))
#+end_src
** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") #'er/expand-region))
#+end_src
** TODO smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t))
#+end_src
** Fix annoying keys
*** Audio keys
These keys get captured in Xorg with WSL
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-set-key (kbd "<XF86AudioLowerVolume>") #'ignore)
    (global-set-key (kbd "<XF86AudioRaiseVolume>") #'ignore)
    (global-set-key (kbd "<XF86AudioMute>") #'ignore))
#+end_src
** read-only
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq view-read-only t))
#+end_src
** upcase / downcase / capitalize
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-set-key (kbd "M-u") #'upcase-dwim)
    (global-set-key (kbd "M-l") #'downcase-dwim)
    (global-set-key (kbd "M-c") #'capitalize-dwim))
#+end_src
** Uniquify
#+begin_src emacs-lisp
  (use-package uniquify
    :straight nil
    :config
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-separator "/")
    (setq uniquify-after-kill-buffer-p t)
    (setq uniquify-ignore-buffers-re "^\\*"))
#+end_src
** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src
*** Dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :config
    (setq all-the-icons-dired-monochrome nil)
    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))
#+end_src
*** Completion
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :config
    (all-the-icons-completion-mode t))
#+end_src
*** Ibuffer
#+begin_src emacs-lisp
  (use-package all-the-icons-ibuffer
    :config
    (all-the-icons-ibuffer-mode t))
#+end_src
*** TODO Add icons to more files
** TODO WSL
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (defvar wsl-user nil)

    (defun wsl-p ()
      (not (eq
            (or (string-match-p "Windows" (getenv "PATH"))
                (string-match-p "Microsoft" (shell-command-to-string "uname -a")))
            nil)))

    (when (wsl-p)
      (defun wsl-hostname ()
        "Get the hostname of the host os."
        (interactive)

        (let ((hostname (s-trim (shell-command-to-string "grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'"))))
          (message "Address is %s" hostname)
          (kill-new hostname))))

    (when (wsl-p)
      (setq wsl-user
            (string-trim-right (shell-command-to-string "powershell.exe '$env:UserName'"))))
    (defun wsl-insert-home ()
      (interactive)
      (if (wsl-p)
          (insert (format "/mnt/c/Users/%s/" wsl-user))
        (message "you're not on wsl")))
    (global-set-key (kbd "C-c i w") #'wsl-insert-home)

    (when (wsl-p)
      (setq browse-url-browser-function #'browse-url-generic
            browse-url-generic-program "explorer.exe"))

    (when (wsl-p)
      (global-set-key (kbd "<Scroll_Lock>") #'ignore)))
#+end_src
*** TODO explorer.exe sometimes opens incorrectly
** TODO Emotes
Add emojify https://github.com/iqbalansari/emacs-emojify
** TODO Search engines
#+begin_src emacs-lisp
  (use-package engine-mode
    :config
    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")
    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")
    (defengine google
      "https://google.com/search?q=%s"
      :keybinding "g")

    (setq engine/browser-function #'browse-url-xdg-open)
    (engine/set-keymap-prefix (kbd "C-c e")))
#+end_src
*** TODO Make it use the browser outside of WSL
* TODO Spelling and text autocompletion
** Ispell
#+begin_src emacs-lisp
(use-package ispell
  :straight nil)
#+end_src
** Flyspell
TODO: disable when changing modes to a programming mode
#+begin_src emacs-lisp :tangle no
  (use-package flyspell
    :straight nil
    :hook (prog-mode . flyspell-mode))
#+end_src
Use flyspell
** TODO Autocompletion of words
** TODO Automatic checking and fixing
** TODO Automatic selecting of language
* Emacs development
** TODO Refine
Broken
#+begin_src emacs-lisp :tangle no
  (use-package refine
    :config
    (add-hook 'refine-mode-hook #'evil-emacs-state))
#+end_src
* Help
** Show keys
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))
#+end_src
** TODO Shortdoc
=shortdoc-display-group=
** Help buffer
Automatically select the help buffer, so that it'd be easier to close after reading
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq help-window-select t))
#+end_src
** TODO Helpful
#+begin_src emacs-lisp
  (use-package helpful)
#+end_src
** Function discovery
#+begin_src emacs-lisp
  (use-package suggest)
#+end_src
** TODO Info
#+begin_src emacs-lisp
  (use-package info
    :straight nil
    :bind (:map Info-mode-map
                ("C-c l" . #'ace-link)))
#+end_src
* TODO Impatient
This mode provides basic live reload support.
#+begin_src emacs-lisp
  (use-package impatient-mode
    :disabled t)
#+end_src
* C
** TODO Uncrustify
Disabled because it needs the uncrustify binary
#+begin_src emacs-lisp
  (use-package uncrustify
    :disabled t)
#+end_src
* Compiling
** RMSBolt
#+begin_src emacs-lisp
  (use-package rmsbolt)
#+end_src
* explain-pause-mode
#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :disabled
    :config
    (explain-pause-mode t))
#+end_src
* Reading
** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools ;; This package causes issues
    :magic ("%PDF" . (lambda () (pdf-view-mode) (display-line-numbers-mode 0)))
    :config
    (add-hook 'pdf-tools-enabled-hook 'auto-revert-mode))
#+end_src
** Books
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))
#+end_src
* Buffer / window navigation
** Ibuffer
Ibuffer provides a dired-like interface for working with buffers
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-set-key (kbd "C-x C-b") 'ibuffer))
#+end_src
** Windmove
Allow navigating windows with Shift-<key arrow>
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (windmove-default-keybindings))
#+end_src
** Eyebrowse
Adds workspaces
#+begin_src emacs-lisp
  (use-package eyebrowse
    :config
    (eyebrowse-mode 1))
#+end_src
** ace-window
Manipulate windows with ace
#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window)
           ("C-c w" . ace-window))
    :config
    (leader-def "w" #'ace-window))
#+end_src
** winner
#+begin_src emacs-lisp
  (use-package winner
    :straight nil
    :config
    (winner-mode t))
#+end_src
** zoom
Automatically resize windows
#+begin_src emacs-lisp
  (use-package zoom
    :config
    (leader-def "z" #'zoom))
#+end_src
** TODO Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :straight nil
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function 'split-window-horizontally))
#+end_src
* Project navigation
** TODO counsel-rg
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (leader-def
      "p p" #'projectile-commander
      "p f" #'projectile-find-file
      "p s" #'projectile-switch-project)
    (setq projectile-enable-caching nil)

    (projectile-global-mode t))
#+end_src
*** TODO Remove projectile
Projectile doesn't behave properly and it should be replaced with
something simpler
* Completion
** Mini frame
#+begin_src emacs-lisp
  (use-package mini-frame)
#+end_src
** Recursive
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq enable-recursive-minibuffers t)
    (setq minibuffer-depth-indicate-mode t))
#+end_src
** Selectrum
#+begin_src emacs-lisp
  (use-package orderless)
  (use-package selectrum
    :after orderless
    :bind (("C-c ," . #'selectrum-quick-select)
           ("C-c r" . #'selectrum-repeat)
           :map selectrum-minibuffer-map
           ("<escape>" . #'abort-recursive-edit))
    :custom-face
    (selectrum-current-candidate ((t (:foreground "#68f3ca"))))
    :config
    (selectrum-mode t)
    (setq completion-styles '(orderless)))

  (use-package selectrum-prescient
    :config
    (setq selectrum-prescient-enable-filtering nil)
    (selectrum-prescient-mode t)
    (prescient-persist-mode t))
#+end_src
*** TODO Make functions like find-file work like in Ivy (backspaces goes to parent)
*** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode t))
#+end_src
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-x b" . consult-buffer)
           ("C-c m" . consult-imenu)
           ("C-c s" . consult-line)
           ("C-x M-:" . consult-complex-command))
    :config
    (leader-def "s" #'consult-line))
  (use-package consult-dir
    :config
    (leader-def
      "d" #'consult-dir
      "D" #'dired
      "f" #'find-file))
  (use-package consult-flycheck)
#+end_src
** At point
#+begin_src emacs-lisp
  (use-package corfu
    :straight (corfu :includes (corfu-quick corfu-info)
                     :files (:defaults "extensions/corfu-*.el"))

    :bind
    (:map corfu-map
          ("M-m" . corfu-move-to-minibuffer)
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous))
    :config
    (setq tab-always-indent 'complete)

    (setq corfu-cycle t)
    (setq corfu-count 14)

    (defun corfu-move-to-minibuffer ()
      (interactive)
      (let ((completion-extra-properties corfu--extra)
            completion-cycle-threshold completion-cycling)
        (apply #'consult-completion-in-region completion-in-region--data)))

    (global-corfu-mode 1))

  (use-package corfu-quick
    :straight nil
    :bind
    (:map corfu-map
          ("C-," . corfu-quick-complete)))

  (use-package corfu-doc
    :config
    (corfu-doc-mode t))

  (use-package corfu-info
    :straight nil
    :bind
    (:map corfu-map
          ("M--" . corfu-info-documentation)
          ("M-p" . corfu-doc-scroll-down)
          ("M-n" . corfu-doc-scroll-up)
          ("M-d" . corfu-doc-toggle)))

#+end_src
* Embark
#+begin_src emacs-lisp
  (use-package embark
    :after evil
    :config
    (general-def
      :keymaps '(global emacs normal emacs)
      "C-c ." #'embark-act
      "M-." #'embark-act
      "C-h B" #'embark-bindings)
    (leader-def "." #'embark-act))

  (use-package embark-consult
    :after embark consult)
#+end_src
** TODO Relearn
* Aesthetics
** Font
Use system font
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (set-face-attribute 'default nil :height 100))
#+end_src
** Colorscheme
#+begin_src emacs-lisp
  ;;; Good themes:
  ;; kaolin-themes
  ;; gruvbox-theme

  (use-package doom-themes
    :config
    (load-theme 'doom-one t))
#+end_src
** Solaire
Color popout modes differently

#+begin_src emacs-lisp
  (use-package solaire-mode
    :config
    (solaire-global-mode t))
#+end_src
** Editor frame
Make Emacs more minimalist
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (blink-cursor-mode 0))
#+end_src

Add some widgets
#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;;(global-hl-line-mode 1)
    (column-number-mode 1)
    (size-indication-mode 1))
#+end_src
** Fringe
*** EOF
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq-default indicate-empty-lines t))
#+end_src
** Frame title
#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;; add a bit better frame title
    (setq-default frame-title-format "%b (%f)"))
#+end_src
** Bell
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq ring-bell-function (lambda ()))
    (setq visible-bell nil))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq-default display-line-numbers-type 'relative)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode))
#+end_src
** Save place
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (save-place-mode t))
#+end_src
** Modeline
Use doom-modeline for more functionality
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-indent-info t)
    :config
    (doom-modeline-mode t))
#+end_src
*** Clock
#+begin_src emacs-lisp
  (use-package display-time
    :no-require t
    :straight nil
    :init
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (setq display-time-default-load-average nil)
    :config
    (display-time-mode t))
#+end_src
*** Modeline hiding
#+begin_src emacs-lisp
  (use-package hide-mode-line)
#+end_src
* Org
TODO: fix speed commands
TODO: configure maintaining the ~/org/ directory
TODO: uncomment and test org-log logging
#+begin_src emacs-lisp
  (use-package org
    :straight nil
    :config
    (setq org-use-speed-commands t)
    (setq org-startup-indented t)
    ;; (setq org-log-into-drawer t)
    ;; (setq org-log-done 'time)
    (setq org-support-shift-select t)
    ;; (setq org-directory "~/org/")
    ;; (setq org-agenda-files '("~/org/"))
    (setq org-hide-emphasis-markers nil))
#+end_src
** Capture
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\nCreated on: %T%i\n")
          ("r" "Reading list" entry (file+headline org-default-notes-file "Reading list")
           "* TODO %?\nCreated on: %T%i\n")
          ("b" "Book list" entry (file+headline org-default-notes-file "Book list")
           "* TODO %?\nCreated on: %T%i\n")
          ("e" "Emacs todo" entry (file+headline org-default-notes-file "Emacs todo list")
           "* TODO %?\nCreated on: %T%i\n")

          ("f" "Favorite page" entry (file+headline org-default-favorites-file "Favorite pages")
           "* %?\nCreated on: %T%i\n")))
#+end_src
** Keys
#+begin_src emacs-lisp
  (leader-def
    "o b d" (lambda () (interactive) (dired org-directory))
    "o b n" (lambda () (interactive) (find-file org-default-notes-file))
    "o c" #'org-capture
    "o n" #'org-toggle-narrow-to-subtree)
#+end_src
** Evil
#+begin_src emacs-lisp
  ;; TODO: add make blocks cycleable from evil normal mode
  (use-package evil-org
    :after evil
    :config
    (add-hook 'org-mode-hook #'evil-org-mode))
#+end_src
** Babel
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq org-src-tab-acts-natively t)
    (setq org-src-preserve-indentation nil)
    (setq org-src-window-setup 'current-window))
#+end_src
*** Source blocks
#+begin_src emacs-lisp
  (setq org-structure-template-alist ())
  (add-to-list 'org-structure-template-alist '("e" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("s" . "src sh"))
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
    :config
    (evil-mode t)

    (evil-define-key '(normal visual) 'global
      (kbd "<tab>") #'er/expand-region)
    (add-hook 'view-mode-hook #'evil-motion-state))
#+end_src
** Lispy
#+begin_src emacs-lisp
  (use-package evil-lispy
    :hook ((emacs-lisp-mode . evil-lispy-mode)
           (clojure-mode . evil-lispy-mode)))
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :no-require t
    :config
    (setq dired-dwim-target t))
#+end_src
** Keys
#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "SPC") nil)
#+end_src
** Narrowing
#+begin_src emacs-lisp
  (use-package dired-narrow
    :bind (:map dired-mode-map
                (")" . #'dired-narrow)))
#+end_src
** Omit
#+begin_src emacs-lisp
  (use-package dired-x
    :straight nil
    :bind (:map dired-mode-map
                ("O" . #'dired-omit-mode))
    :config
    (setq dired-omit-files "^\\...+$")
    (add-to-list 'dired-omit-extensions ".eld")
    (add-hook 'dired-mode-hook #'dired-omit-mode))
#+end_src
** Details
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (use-package dired-collapse
    :hook (dired-mode . dired-collapse))
  (use-package dired-subtree
    :bind (:map dired-mode-map
                (("i" . 'dired-subtree-insert)
                 ("I" . 'dired-subtree-remove))))
#+end_src
** Interacting with the outside
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t)
#+end_src
* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (leader-def "t" #'treemacs-select-window))

  (use-package treemacs-evil
    :after treemacs)

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-magit
    :after treemacs)

  (use-package treemacs-all-the-icons
    :after treemacs
    :config
    (treemacs-load-theme 'all-the-icons))

  (use-package lsp-treemacs
    :after treemacs lsp-mode)
#+end_src
* Tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :after projectile
    :general
    (:states '(normal)
             "g t" 'centaur-tabs-forward
             "g T" 'centaur-tabs-backward)
    :config
    (setq centaur-tabs-style "slant"
          centaur-tabs-height 32
          centaur-tabs-set-icons t
          centaur-tabs-show-navigation-buttons t

          x-underline-at-descent-line t
          centaur-tabs-set-bar 'under

          centaur-tabs-cycle-scope 'tabs
          centaur-tabs-enable-ido-completion nil

          centaur-tabs-modified-marker "●"
          centaur-tabs-set-modified-marker t

          centaur-tabs-down-tab-text " ▼ "
          centaur-tabs-forward-tab-text " ▶ "
          centaur-tabs-backward-tab-text " ◀ "

          uniquify-separator "/")

    (leader-def
      "g t s" 'centaur-tabs-switch-group)

    (centaur-tabs-headline-match)
    (centaur-tabs-group-by-projectile-project)
    (centaur-tabs-mode t))
#+end_src
* Terminal
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :when (eq system-type 'gnu/linux)
    :config
    (setq-default vterm-exit-functions #'kill-buffer)
    (setq vterm-kill-buffer-on-exit t)
    (evil-set-initial-state 'vterm-mode 'emacs)
    (leader-def "v" #'vterm))
#+end_src
*** eshell-vterm
#+begin_src emacs-lisp
  (use-package eshell-vterm
    :config
    (eshell-vterm-mode)
    (defalias 'eshell/v 'eshell-exec-visual))
#+end_src
**** TODO [#A] Fix error when exiting buffer
** Eshell
#+begin_src emacs-lisp
   ;;; -*- legical-binding: t; -*-

  (use-package eshell
    :straight nil
    :config
    (setq eshell-scroll-to-bottom-on-input t)
    (setq eshell-banner-message "")
    (leader-def "e" #'eshell))

  (defun eshell-current-p ()
    (eq major-mode 'eshell-mode))

  (defvar eshell-binds ()
    "Contains pairs of keys and functions")

  (defun eshell-bind-initialize ()
    (dolist (bind eshell-binds)
      (define-key eshell-mode-map (kbd (car bind)) (cadr bind)))
    nil)

  (defun eshell-bind (key function)
    (add-to-list 'eshell-binds (list key function))
    (when (eq major-mode 'eshell-mode)
      (eshell-bind-initialize))
    nil)

  (add-hook 'eshell-mode-hook #'eshell-bind-initialize)

  (eshell-bind "<tab>" #'completion-at-point)
  (eshell-bind "C-M-i" #'completion-at-point)
#+end_src
*** Up
#+begin_src emacs-lisp
  (use-package eshell-up
    :config
    (defalias 'eshell/up #'eshell-up))
#+end_src
*** Clear
Clear the eshell buffer
#+begin_src emacs-lisp
  (defun eshell/nuke ()
    "Clear the eshell buffer."
    (interactive)
    (when (eshell-current-p)
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)
        (delete-region 1 2))))

  (eshell-bind "M-l" #'eshell/nuke)
#+end_src
*** Last
Go to the last line of the window
#+begin_src emacs-lisp
  (defun eshell/last ()
    "Clear the window"
    (interactive)
    (goto-char (point-max))
    (deactivate-mark)
    (recenter 0))

  (eshell-bind "C-l" #'eshell/last)
#+end_src
*** WSL
**** Home
#+begin_src emacs-lisp
  (defun eshell/wsl-h ()
    (interactive)

    (eshell/cd (concat "/mnt/c/Users/" wsl-user)))
#+end_src
**** C
#+begin_src emacs-lisp
  (defun eshell/wsl-c ()
    (interactive)

    (eshell/cd "/mnt/c/"))
#+end_src
*** TODO img
This shows an extra shell prompt
#+begin_src emacs-lisp
  (defun eshell/img (img-path)
    (let* ((path (expand-file-name img-path))
           (img (create-image path))
           (inhibit-read-only t))
      (setf (image-property img :max-width) (/ (window-pixel-height) 3))
      (let ((current-point (point))
            (map (make-sparse-keymap)))
        (define-key map [mouse-1]
          `(lambda ()
             (interactive)
             (find-file ,path)
             (view-mode)))
        (insert-image img)
        (put-text-property current-point (+ current-point 1)
                           'keymap map))
      (eshell-send-input)
      (delete-region (line-beginning-position) (line-end-position)))
    nil)
#+end_src
*** TODO Backspace
Pressing backspace on an empty prompt should send the user to the previous prompt
#+begin_src emacs-lisp
  (defun eshell--backspace ()
    (interactive)
    (if (get-char-property (- (point) 1) 'read-only)
        (eshell-previous-prompt 1)
      (backward-delete-char 1)))

  (eshell-bind "DEL" #'eshell--backspace)

  (eshell-bind "M-<left>" #'eshell-previous-prompt)
  (eshell-bind "M-<up>" #'eshell-previous-prompt)

  (eshell-bind "M-<right>" #'eshell-next-prompt)
  (eshell-bind "M-<down>" #'eshell-next-prompt)
#+end_src
*** Escape
**** M-x
Run emacs commands from eshell
#+begin_src emacs-lisp
  (defun eshell/in-em (&optional command)
    (if command
        (call-interactively (intern command))
      (error "No command")))
#+end_src
**** Bash
Run in bash
#+begin_src emacs-lisp
  (defun eshell/in-sh (&rest body)
    (let ((command (s-join " " body))
          (inhibit-read-only t))
      (fundamental-mode)
      (call-process "/bin/sh" nil t nil "-c" command)
      (eshell-mode)
      (delete-region (line-beginning-position) (line-end-position))))
#+end_src
*** C-d
Exits if C-d pressed on empty prompt
#+begin_src emacs-lisp
  (defun eshell-C-d ()
    (interactive)
    (if (eq (point) (point-max))
        (eshell-life-is-too-much)
      (delete-char 1)))

  (add-hook 'eshell-mode-hook (lambda () (local-set-key (kbd "C-d") 'eshell-C-d)))
#+end_src
**** TODO Fix this
*** View
View a file in a read-only window with syntax highlighting
#+begin_src emacs-lisp
  (defun eshell/view (filename)
    (let ((opened (get-file-buffer filename))))
    (with-current-buffer (find-file-noselect filename)
      (view-mode)
      (switch-to-buffer-other-window (current-buffer))
      (local-set-key (kbd "q") #'kill-buffer-and-window)
      nil))
#+end_src
*** Visual cd
#+begin_src emacs-lisp
  (defun eshell/vcd ()
    "Visually cd."

    (eshell/cd (read-directory-name "Cd to: ")))
#+end_src
* Programming
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :config
    (setq lsp-keymap-prefix "C-c l")
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

    :hook ((python-mode . lsp)
           (typescript-mode . lsp)
           (web-mode . lsp)))

  (use-package lsp-ui
    :after lsp-mode
    :config
    (setq lsp-headerline-breadcrumb-enable nil))
#+end_src
** Tree Sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  (use-package tree-sitter-langs)
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package web-mode
    :mode (("\\.html" . web-mode)
           ("\\.svelte" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 4)
    (setq web-mode-part-padding 4)
    (setq web-mode-block-padding 4)
    (setq web-mode-style-padding 2)
    (setq web-mode-script-padding 4)

    (setq web-mode-enable-auto-pairing t))
#+end_src
** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src
** Clojure
#+begin_src emacs-lisp
  (use-package cider
    :config
    (evil-set-initial-state 'cider-inspector-mode 'emacs))
#+end_src
** Common Lisp
*** Sly
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
  (use-package sly
    :config
    (add-hook 'sly-db-hook #'evil-emacs-state))
#+end_src
** Universal
*** Indentation
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)

  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1))
#+end_src
*** Parenthesis
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (electric-pair-mode 1)
    (show-paren-mode 1))
#+end_src
*** TODO Flycheck
TODO: Fix for elisp
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    :config
    (global-flycheck-mode 0)
    (setq-default flycheck-disabled-checkers '(emacs-list-checkdoc)))
#+end_src
*** TODO Quickrun
#+begin_src emacs-lisp
  (use-package quickrun)
#+end_src
* Git
#+begin_src emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status))

  (use-package forge
    :after magit)
#+end_src
** git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :diminish
    :init
    (setq git-gutter:hide-gutter t)
    (setq git-gutter:verbosity 0)
    (setq git-gutter:update-interval .02)
    :config
    (global-git-gutter-mode t))

  (use-package fringe-helper)
  (use-package git-gutter-fringe
    :diminish
    :after git-gutter fringe-helper
    :config
    (fringe-helper-define 'git-gutter-fr:deleted 'bottom
      "X......."
      "XX......"
      "XXX....."
      "XXXX...."
      "XXXXX..."
      "XXXXXX.."
      "XXXXXXX."
      "XXXXXXXX")
    (set-face-foreground 'git-gutter-fr:deleted "red")
    (set-face-background 'git-gutter-fr:deleted "transparent")

    (set-face-background 'git-gutter-fr:added "#98be65")
    (fringe-helper-define 'git-gutter-fr:added nil "")

    (set-face-background 'git-gutter-fr:modified "#d19a66")
    (fringe-helper-define 'git-gutter-fr:modified nil ""))

  (defhydra git-gutter-hydra ()
    "git-gutter"
    ("j" #'git-gutter:next-hunk "Next hunk" :column "Navigation")
    ("k" #'git-gutter:previous-hunk "Previous hunk")
    ("p" #'git-gutter:popup-hunk "Popup hunk")
    ("m" #'git-gutter:mark-hunk "Mark hunk")
    ("%" #'git-gutter:end-of-hunk "End of hunk")
    ("s" #'git-gutter:statistic "Statistic" :column "Operations")
    ("S" #'git-gutter:stage-hunk "Stage hunk")
    ("r" #'git-gutter:revert-hunk "Revert hunk")
    ("q" (message "Abort") "Quit" :exit t))
  (leader-def "h g" #'git-gutter-hydra/body)
#+end_src
* Text editing
** TODO multiple-cursors
Add it and make it compatible with Evil

#+begin_src emacs-lisp
  (use-package multiple-cursors)
#+end_src
** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :config
    (setq-default olivetti-body-width 0.8))
#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
    :config
    (leader-def
      "a a" #'avy-goto-char-timer
      "a l" #'avy-goto-line

      "a r c" #'avy-copy-region
      "a r m" #'avy-move-region
      "a r k" #'avy-kill-region))
#+end_src
** ace-link
#+begin_src emacs-lisp
  (use-package ace-link
    :config
    (leader-def "l" #'ace-link))
#+end_src
** move-text
#+begin_src emacs-lisp
  (use-package move-text
    :config
    (move-text-default-bindings))
#+end_src
** TODO snippets
#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src
** Translating
#+begin_src emacs-lisp
  (use-package go-translate
    :config
    (setq gts-translate-list '(("en" "de") ("en" "cz") ("de" "en"))))

  ;; TODO: use emacs state in gts buffers
  ;; TODO: use minibuffer selection for languages everytime
#+end_src
* Web services
** Pastebins
Easy access to pastebins
#+begin_src emacs-lisp
  (use-package webpaste)
#+end_src
* Hydras
** Install
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
** Scripts
No hydras yet
* Useful tools
** TODO Crux
#+begin_src emacs-lisp
  (use-package crux)
#+end_src
** Devdocs
TODO: consider using devdocs-browser instead
#+begin_src emacs-lisp
  (use-package devdocs)
#+end_src
** Playground
#+begin_src emacs-lisp
  ;; TODO: add a playground minor mode with various features like in smalltalk's playground

  (defvar playground-default-name "playground"
    "Name that will be used for a playground buffer, if no name is
  specified in the function call.")
  (defvar playground-default-separator ":"
    "Character(s) that will be used adding an index to a playground buffer name.")
  (defvar playground-reuse-playgrounds nil
    "Non-nil if playgrounds should reuse names of closed playgrouds, otherwise a counter of previously opened playgrounds will be used.")
  (defvar playground--count 0
    "Count of playgrounds that have already been opened.")

  (defun playground-uniquify-name (name &optional separator)
    (when (not separator)
      (setq separator playground-default-separator))
    (if playground-reuse-playgrounds
        (progn
          (let ((i 1)
                (buffer-name))
            (while (get-buffer (setq buffer-name (concat name separator (number-to-string i))))
              (setq i (1+ i)))
            buffer-name))
      (let ((buffer-name (concat name separator (number-to-string playground--count))))
        (if (get-buffer buffer-name)
            (playground-uniquify-name name (concat separator separator))
          (setq playground--count (1+ playground--count))
          buffer-name))))

  (defun playground (&optional name)
    (interactive)

    (when (not name)
      (setq name playground-default-name))
    (let* ((buffer-name (playground-uniquify-name name))
           (buffer (get-buffer-create buffer-name)))
      (with-current-buffer buffer (emacs-lisp-mode))
      (pop-to-buffer buffer)))
#+end_src
* Personal config
#+begin_src emacs-lisp
  (let ((personal-config (f-join user-emacs-directory "personal-config.el")))
    (when (f-exists? personal-config)
      (message "Personal config found! Loading")
      (load personal-config)))
#+end_src
* TODO Calc
** TODO Learn how to use it
* Emenu
My own dmenu-like function
** Requirements
We need mini-frame because it provides child-frame minibuffer
functionality.
#+begin_src emacs-lisp
  (straight-use-package 'mini-frame)
#+end_src
** Source
#+begin_src emacs-lisp
  (defvar emenu-frame-params
    '((top . 0.3)
      (width . 0.5)
      (left . 0.8))
    "Parameters used for minibuffer frame.")

  (defmacro emenu (&rest body)
    "Run body with anything in minibuffer being in a frame centered on the screen."

    ;; TODO: Autofocus
    `(let ((mini-frame-status (if (eq mini-frame-mode nil) 0 1))
           (inhibit-quit t)
           (selectrum-max-window-height 25)
           (mini-frame-standalone t)
           (mini-frame-show-parameters emenu-frame-params))
       (mini-frame-mode 1)

       (unwind-protect
           (progn
             ,@body)
         (mini-frame-mode mini-frame-status))))
#+end_src
** Examples
#+begin_src emacs-lisp :tangle no :results value silent
  (emenu
   (let (operation value)
     (setq operation (completing-read "Operation: " '(("Uppercase") ("Lowercase")) nil t))

     (setq value (with-temp-buffer
                   (insert (read-string "Enter a string to convert: "))
                   (cond
                    ((string= operation "Uppercase") (upcase-region 1 (point-max)))
                    ((string= operation "Lowercase") (downcase-region 1 (point-max))))
                   (buffer-string)))
     (kill-new value)
     (message "%s" value)))
#+end_src
* REPL tools
#+begin_src emacs-lisp
  (defun nuke ()
    (interactive)

    (let ((inhibit-read-only t))
      (setf (buffer-string) "")))
#+end_src
** Lisp
*** Cider-like defun fringe
When defun is up-to-date, show green in fringe.
